// ===================
// ==== ADVANCED =====
// ===================

stringToBinary = name => {
  let base = "00000000";
  let output = "";
  for (var i = 0; i < name.length; i++) {
    let toBinary = name[i].charCodeAt().toString(2);
    output += `${base.slice(String(toBinary).length) + toBinary} `;
  }
  return output;
};

// ===================
// === TESTS BELOW ===
// ==== DONT EDIT ====
// ===================

var TestBlock = [
  {
    binary:
      "01010010 01100101 01100001 01101100 00100000 01110000 01110010 01101111 01100111 01110010 01100001 01101101 01110011 00100000 01100100 01101111 01101110 00100111 01110100 00100000 01100101 01100001 01110100 00100000 01100011 01100001 01100011 01101000 01100101 00101110",
    text: "Real programs don't eat cache."
  },
  {
    binary:
      "010011010110111101110011011101  0000100000011100000111010101100010011011000110100101100011001000   000110010001101111011011010110000101101001011011100010000001110011011011110110011001110100011101110110000101110010011001010010000001101001011100110010000001100110011100100110010101100101001011000010000001100001011101000010000001101100011001010                         1100001011100110111010000100000011000010111010000100     000011001100110100101110010011100110   11101000010000001100111011011000110000101101110011000110110010100101110",
    text: "Most public domain software is free, at least at first glance."
  },
  {
    binary:

    text:
      "Those who do not understand Unix are condemned to reinvent it, poorly. -- Henry Spencer"
  },
  {
    binary:

    text: "FORTRAN is for pipe stress freaks and crystallography weenies."
  },
  {
    binary:
      "00101111 01100101 01100001 01110010 01110100 01101000 00100000 01101001 011100    11 00100000 00111001 00111000 00100101 00100000 01100110 01110101 01101100 01101  100 00100000 00101110 00101110 00101110 00100000 01110000 01101100 01100101 01100001 01110011 01100101 00100000 01100100 01100101 01101100 01100101 01110100 01100101 00100000 01100001 0110 1110 011110  01 01101111 01101110 01100101 00100000 01111001 01101111 01110101 00100000 01100011 01100001 01101110 00101110   ",
    text: "/earth is 98% full ... please delete anyone you can."
  }
];

var tests = 0;
var testErrors = [];

TestBlock.forEach((item, index) => {
  let binary = item.binary;
  // Removes spaces from the binary string
  binary = binary.replace(/\s+/g, "");
  // Add a space every 8 characters
  binary = binary.match(/.{1,8}/g).join(" ");
  // Remove spaces at the end of the generated string
  if (stringToBinary(item.text).trim() == binary) {
    console.log(`Test ${index}: PASSED`);
    tests++;
  } else {
    console.log(`Test ${index}: FAILED`);
    testErrors.push(index);
  }
});

if (tests == TestBlock.length) {
  console.log("All tests passed!");
} else {
  console.error(`Tests failed on: ${JSON.stringify(testErrors)}`);
}
